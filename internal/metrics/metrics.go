package metrics

import (
	"log"
	"net/http"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

var (
	// üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π usecase'–æ–≤
	UsecaseTotal = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "bot_usecase_total",
			Help: "Total number of usecases executed",
		},
		[]string{"usecase"},
	)

	// ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è usecase'–æ–≤
	UsecaseDuration = prometheus.NewHistogramVec(
		prometheus.HistogramOpts{
			Name:    "bot_usecase_duration_seconds",
			Help:    "Duration of usecase execution in seconds",
			Buckets: prometheus.DefBuckets,
		},
		[]string{"usecase"},
	)

	// üßç –°–∏–ª–∞ –∏–≥—Ä–æ–∫–∞ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
	GamerPowerGauge = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "bot_gamer_power",
			Help: "Power of the current gamer",
		},
		[]string{"gamer"},
	)

	// üî• –£—Ä–æ–≤–µ–Ω—å –ø–µ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
	GamerFurnaceLevel = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "bot_gamer_furnace_level",
			Help: "Furnace building level of the gamer",
		},
		[]string{"gamer"},
	)

	// ‚ùå –û—à–∏–±–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å ADB
	ADBErrorTotal = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "bot_adb_error_total",
			Help: "Number of ADB-related errors (click/screenshot/swipe)",
		},
		[]string{"device_id", "type"},
	)
)

// üöÄ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
func Init() {
	prometheus.MustRegister(
		UsecaseTotal,
		UsecaseDuration,
		GamerPowerGauge,
		GamerFurnaceLevel,
		ADBErrorTotal,
	)
}

// üåê –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ Prometheus
func StartExporter() {
	Init()

	go func() {
		http.Handle("/metrics", promhttp.Handler())
		log.Println("üìà Prometheus metrics available at http://localhost:2112/metrics")
		if err := http.ListenAndServe(":2112", nil); err != nil {
			log.Fatalf("‚ùå Failed to start metrics exporter: %v", err)
		}
	}()
}
