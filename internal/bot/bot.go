package bot

import (
	"context"
	"log/slog"
	"time"

	"github.com/redis/go-redis/v9"

	"github.com/batazor/whiteout-survival-autopilot/internal/device"
	"github.com/batazor/whiteout-survival-autopilot/internal/domain"
	"github.com/batazor/whiteout-survival-autopilot/internal/fsm"
	"github.com/batazor/whiteout-survival-autopilot/internal/redis_queue"
)

type Bot struct {
	Gamer  *domain.Gamer
	Device *device.Device
	Queue  *redis_queue.Queue
	Logger *slog.Logger
}

func NewBot(dev *device.Device, gamer *domain.Gamer, rdb *redis.Client, log *slog.Logger) *Bot {
	return &Bot{
		Gamer:  gamer,
		Device: dev,
		Queue:  redis_queue.NewGamerQueue(rdb, gamer.ID),
		Logger: log,
	}
}

func (b *Bot) Play(ctx context.Context) {
	for {
		uc, err := b.Queue.Pop(ctx)
		if err != nil {
			b.Logger.Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å use‚Äëcase", "err", err)
			continue
		}

		// –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Üí –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
		if uc == nil {
			b.Logger.Info("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
			return
		}

		b.Logger.Info("üöÄ –í—ã–ø–æ–ª–Ω—è—é use‚Äëcase", "name", uc.Name, "priority", uc.Priority)

		// –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω —é–∑–∫–µ–π—Å–∞
		b.Device.FSM.ForceTo(uc.Node)
		b.Device.Executor.ExecuteUseCase(ctx, uc, b.Gamer)

		time.Sleep(2 * time.Second) // –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
	}

	// üîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
	b.Device.FSM.ForceTo(fsm.StateMainCity)

	b.Logger.Info("‚è≠Ô∏è –û—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é.")
}
