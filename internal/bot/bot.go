package bot

import (
	"context"
	"log/slog"
	"time"

	"github.com/redis/go-redis/v9"

	"github.com/batazor/whiteout-survival-autopilot/internal/analyzer"
	"github.com/batazor/whiteout-survival-autopilot/internal/config"
	"github.com/batazor/whiteout-survival-autopilot/internal/device"
	"github.com/batazor/whiteout-survival-autopilot/internal/domain"
	"github.com/batazor/whiteout-survival-autopilot/internal/executor"
	"github.com/batazor/whiteout-survival-autopilot/internal/fsm"
	"github.com/batazor/whiteout-survival-autopilot/internal/redis_queue"
	"github.com/batazor/whiteout-survival-autopilot/internal/repository"
)

type Bot struct {
	Gamer    *domain.Gamer
	Email    string
	Device   *device.Device
	Queue    *redis_queue.Queue
	logger   *slog.Logger
	Rules    config.ScreenAnalyzeRules
	Repo     repository.StateRepository
	executor executor.UseCaseExecutor
}

func NewBot(dev *device.Device, gamer *domain.Gamer, email string, rdb *redis.Client, rules config.ScreenAnalyzeRules, log *slog.Logger, repo repository.StateRepository) *Bot {
	exec := executor.NewUseCaseExecutor(
		log,
		config.NewTriggerEvaluator(),
		analyzer.NewAnalyzer(dev.AreaLookup, log),
		dev.ADB,
		dev.AreaLookup,
		gamer.Nickname,
	)

	return &Bot{
		Gamer:    gamer,
		Email:    email,
		Device:   dev,
		Queue:    redis_queue.NewGamerQueue(rdb, gamer.ID),
		logger:   log,
		Rules:    rules,
		Repo:     repo,
		executor: exec,
	}
}

func (b *Bot) Play(ctx context.Context) {
	// üì∏ –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
	b.updateStateFromScreen(ctx, "main_city", "out/bot_"+b.Gamer.Nickname+"_start_main_city.png")

	for {
		select {
		case <-ctx.Done():
			b.logger.Warn("üõë –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω ‚Äî –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
			return
		default:
		}

		// –ø–æ–ª—É—á–∞–µ–º use‚Äëcase –∏–∑ –æ—á–µ—Ä–µ–¥–∏
		uc, err := b.Queue.Pop(ctx)
		if err != nil {
			b.logger.Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å use‚Äëcase", "err", err)
			continue
		}

		// –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Üí –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
		if uc == nil {
			b.logger.Info("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
			break
		}

		// üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º usecase, –µ—Å–ª–∏ –Ω–µ –∏—Å—Ç—ë–∫)
		shouldSkip, err := b.Queue.ShouldSkip(ctx, b.Gamer.ID, uc.Name)
		if err != nil {
			b.logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å TTL usecase", slog.Any("err", err))
			continue
		}
		if shouldSkip {
			b.logger.Info("‚è≠Ô∏è UseCase –ø—Ä–æ–ø—É—â–µ–Ω –ø–æ TTL", slog.String("name", uc.Name))
			continue
		}

		b.logger.Info("üöÄ –í—ã–ø–æ–ª–Ω—è—é use‚Äëcase", "name", uc.Name, "priority", uc.Priority)

		// –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω —é–∑–∫–µ–π—Å–∞
		b.Device.FSM.ForceTo(uc.Node)

		// üì∏ –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ trigger'–æ–º
		b.updateStateFromScreen(ctx, uc.Node, "out/bot_"+b.Gamer.Nickname+"_before_trigger.png")

		b.executor.ExecuteUseCase(ctx, uc, b.Gamer, b.Queue)

		// –í—Ä–µ–º—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞
		time.Sleep(1 * time.Second)
	}

	// –í—Ä–µ–º—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞
	time.Sleep(2 * time.Second)

	// üîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
	b.Device.FSM.ForceTo(fsm.StateMainCity)

	// –í—Ä–µ–º—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞
	time.Sleep(1 * time.Second)

	b.logger.Info("‚è≠Ô∏è –û—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é.")
}
