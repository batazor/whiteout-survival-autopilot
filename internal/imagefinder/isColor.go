package imagefinder

import (
	"context"
	"fmt"
	"image"
	"log/slog"
	"strings"

	"gocv.io/x/gocv"

	"github.com/batazor/whiteout-survival-autopilot/internal/adb"
	"github.com/batazor/whiteout-survival-autopilot/internal/config"
)

func IsColorDominant(
	imagePath string,
	region image.Rectangle,
	expected string,
	ratioThreshold float32,
	logger *slog.Logger,
) (bool, error) {

	img := gocv.IMRead(imagePath, gocv.IMReadColor)
	if img.Empty() {
		return false, fmt.Errorf("failed to load image: %s", imagePath)
	}
	defer img.Close()

	ratio, err := PixelDominance(img, region, expected, ratioThreshold)
	if err != nil {
		return false, err
	}

	logger.Info("PixelDominance",
		slog.String("color", expected),
		slog.Float64("ratio", float64(ratio)),
		slog.Float64("threshold", float64(ratioThreshold)),
	)

	return ratio >= ratioThreshold, nil
}

// CheckRegionColor –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –∑–æ–Ω–µ.
func CheckRegionColor(
	ctx context.Context,
	adb adb.DeviceController,
	lookup *config.AreaLookup,
	regionName string,
	expectedColor string,
	threshold float32,
	logger *slog.Logger,
) (bool, error) {
	logger.Info("üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–∞",
		slog.String("region", regionName),
		slog.String("expected_color", expectedColor),
		slog.Float64("threshold", float64(threshold)),
	)

	imagePath := fmt.Sprintf("screenshots/check_%s.png", regionName)

	_, err := adb.Screenshot(imagePath)
	if err != nil {
		logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", slog.Any("err", err))
		return false, err
	}

	region, ok := lookup.Get(regionName)
	if !ok {
		return false, fmt.Errorf("region '%s' not found in area definitions", regionName)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ –≤ –ª–æ–≥–≥–µ—Ä
	newLogger := logger.With(
		slog.String("region", regionName),
	)

	result, err := IsColorDominant(imagePath, region.Zone, expectedColor, threshold, newLogger)
	if err != nil {
		return false, err
	}

	logger.Info("üé® –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–∞",
		slog.String("region", regionName),
		slog.String("expected_color", expectedColor),
		slog.Bool("is_dominant", result),
	)

	return result, nil
}

func PixelDominance(
	img gocv.Mat,
	region image.Rectangle,
	colorName string,
	ratioThreshold float32,
) (float32, error) {

	spec, ok := colorSpecs[strings.ToLower(colorName)]
	if !ok {
		return 0, fmt.Errorf("unsupported color '%s'", colorName)
	}

	crop := img.Region(region)
	defer crop.Close()

	hsv := gocv.NewMat()
	defer hsv.Close()
	gocv.CvtColor(crop, &hsv, gocv.ColorBGRToHSV)

	h, s, v := gocv.Split(hsv)[0], gocv.Split(hsv)[1], gocv.Split(hsv)[2]
	defer h.Close()
	defer s.Close()
	defer v.Close()

	rows, cols := hsv.Rows(), hsv.Cols()
	var total, match int

	for y := 0; y < rows; y++ {
		for x := 0; x < cols; x++ {
			H := float32(h.GetUCharAt(y, x))         // 0‚Äë179
			S := float32(s.GetUCharAt(y, x)) / 255.0 // 0‚Äë1
			V := float32(v.GetUCharAt(y, x)) / 255.0 // 0‚Äë1

			if S < spec.MinSat || S > spec.MaxSat ||
				V < spec.MinVal || V > spec.MaxVal {
				continue
			}
			total++

			for _, rng := range spec.HueRanges {
				if H >= rng[0] && H <= rng[1] {
					match++
					break
				}
			}
		}
	}

	if total == 0 {
		// –ù–∏ –æ–¥–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è –Ω–µ –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä: —Å—á–∏—Ç–∞–µ–º –¥–æ–ª—é 0, –æ—à–∏–±–∫–∏ –Ω–µ—Ç.
		return 0, nil
	}

	return float32(match) / float32(total), nil
}
