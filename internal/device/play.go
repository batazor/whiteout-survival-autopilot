package device

import (
	"context"
	"time"

	"github.com/batazor/whiteout-survival-autopilot/internal/fsm"
)

func (d *Device) Play() {
	ctx := context.Background()

	for {
		uc, err := d.Queue.Pop(ctx)
		if err != nil {
			d.Logger.Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å usecase –∏–∑ –æ—á–µ—Ä–µ–¥–∏", "error", err)
			break
		}
		if uc == nil {
			d.Logger.Info("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É")
			break
		}

		d.Logger.Info("üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º usecase", "name", uc.Name, "priority", uc.Priority)

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –∏–≥—Ä—ã
		d.FSM.ForceTo(uc.Node)

		d.Executor.ExecuteUseCase(ctx, uc, &d.Profiles[d.activeProfileIdx].Gamer[d.activeGamerIdx])
		time.Sleep(2 * time.Second)
	}

	// üîÅ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
	d.FSM.ForceTo(fsm.StateMainCity)

	d.Logger.Info("‚è≠Ô∏è –û—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é.")
}
