package device

import (
	"context"
	"fmt"
	"log/slog"
	"time"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"

	"github.com/batazor/whiteout-survival-autopilot/internal/domain/state"
	"github.com/batazor/whiteout-survival-autopilot/internal/fsm"
)

func (d *Device) NextGamer(profileIdx, gamerIdx int) {
	// –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ span
	ctx := context.Background()
	tracer := otel.Tracer("device")
	ctx, span := tracer.Start(ctx, "NextGamer")
	defer span.End()

	// –î–æ—Å—Ç–∞—ë–º traceID –¥–ª—è –ª–æ–≥–æ–≤
	traceID := trace.SpanFromContext(ctx).SpanContext().TraceID().String()

	d.activeProfileIdx = profileIdx
	d.activeGamerIdx = gamerIdx

	profile := d.Profiles[profileIdx]
	gamer := &profile.Gamer[gamerIdx]

	d.Logger.Info("üéÆ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ",
		slog.String("email", profile.Email),
		slog.String("nickname", gamer.Nickname),
		slog.Int("id", gamer.ID),
		slog.String("trace_id", traceID),
	)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ FSM
	d.FSM.SetCallback(gamer)

	// üîÅ –ù–∞–≤–∏–≥–∞—Ü–∏—è: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
	d.Logger.Info("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞",
		slog.String("trace_id", traceID),
	)
	d.FSM.ForceTo(state.StateChiefCharacters, nil)

	// –ñ–¥—ë–º nickname
	gamerZones := d.findNicknameOCR(ctx, gamer.Nickname)
	time.Sleep(100 * time.Millisecond)

	d.Logger.Info("üü¢ –ö–ª–∏–∫ –ø–æ nickname –∏–≥—Ä–æ–∫–∞",
		slog.String("text", gamerZones.Text),
		slog.String("trace_id", traceID),
	)
	if err := d.ADB.ClickOCRResult(gamerZones); err != nil {
		d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ nickname –∞–∫–∫–∞—É–Ω—Ç—É",
			slog.Any("err", err),
			slog.String("trace_id", traceID),
		)
		panic(fmt.Sprintf("ClickRegion(nickname:%s) failed: %v", gamer.Nickname, err))
	}

	time.Sleep(2 * time.Second)

	d.Logger.Info("üü¢ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
		slog.String("region", "character_change_confirm"),
		slog.String("trace_id", traceID),
	)
	if err := d.ADB.ClickRegion("character_change_confirm", d.AreaLookup); err != nil {
		d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ character_change_confirm",
			slog.Any("err", err),
			slog.String("trace_id", traceID),
		)
		panic(fmt.Sprintf("ClickRegion(character_change_confirm) failed: %v", err))
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤
	err := d.handleEntryScreens(ctx)
	if err != nil {
		d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –±–∞–Ω–Ω–µ—Ä—ã",
			slog.Any("err", err),
			slog.String("trace_id", traceID),
		)
		panic(fmt.Sprintf("handleEntryScreens() failed: %v", err))
	}

	d.Logger.Info("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –≤ Main City",
		slog.String("trace_id", traceID),
	)
	d.Logger.Info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FSM",
		slog.String("trace_id", traceID),
	)
	d.FSM = fsm.NewGame(d.Logger, d.ADB, d.AreaLookup, d.triggerEvaluator, d.ActiveGamer())
}
