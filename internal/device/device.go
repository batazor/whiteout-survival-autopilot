package device

import (
	"context"
	"log/slog"
	"time"

	"github.com/batazor/whiteout-survival-autopilot/internal/adb"
	"github.com/batazor/whiteout-survival-autopilot/internal/config"
	"github.com/batazor/whiteout-survival-autopilot/internal/domain"
	"github.com/batazor/whiteout-survival-autopilot/internal/fsm"
)

type Device struct {
	Name       string
	Profiles   domain.Profiles
	Logger     *slog.Logger
	ADB        adb.DeviceController
	FSM        *fsm.GameFSM
	areaLookup *config.AreaLookup

	activeProfileIdx int
	activeGamerIdx   int
}

func New(name string, profiles domain.Profiles, log *slog.Logger, areaPath string) (*Device, error) {
	log.Info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ADB-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")
	controller, err := adb.NewController(log, name)
	if err != nil {
		log.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ADB-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä", slog.Any("error", err))
		return nil, err
	}

	areaLookup, err := config.LoadAreaReferences(areaPath)
	if err != nil {
		log.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ area.json:", "error", err)
		return nil, err
	}

	return &Device{
		Name:       name,
		Profiles:   profiles,
		Logger:     log,
		ADB:        controller,
		FSM:        fsm.NewGame(log, controller, areaLookup),
		areaLookup: areaLookup,
	}, nil
}

func (d *Device) Start(ctx context.Context) {
	d.Logger.Info("üöÄ –°—Ç–∞—Ä—Ç –¥–µ–≤–∞–π—Å–∞")

	for {
		for pIdx, profile := range d.Profiles {
			for gIdx := range profile.Gamer {
				select {
				case <-ctx.Done():
					d.Logger.Info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–≤–∞–π—Å–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É")
					return
				default:
					if gIdx == 0 {
						d.Logger.Info("üîÑ –°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É",
							"profile_index", pIdx,
							"gamer_index", gIdx,
							"nickname", profile.Gamer[gIdx].Nickname,
						)
						d.NextProfile(pIdx, gIdx)
					} else {
						d.Logger.Info("üë§ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É —Ç–æ–≥–æ –∂–µ –ø—Ä–æ—Ñ–∏–ª—è",
							"profile_index", pIdx,
							"gamer_index", gIdx,
							"nickname", profile.Gamer[gIdx].Nickname,
						)
						d.NextGamer(pIdx, gIdx)
					}

					time.Sleep(5 * time.Second)
				}
			}
		}
	}
}
