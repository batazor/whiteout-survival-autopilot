package device

import (
	"context"
	"errors"
	"log/slog"
	"sort"
	"strings"

	"github.com/lithammer/fuzzysearch/fuzzy"

	"github.com/batazor/whiteout-survival-autopilot/internal/domain"
	"github.com/batazor/whiteout-survival-autopilot/internal/fsm"
	"github.com/batazor/whiteout-survival-autopilot/internal/vision"
)

func (d *Device) DetectedGamer(ctx context.Context, imagePath string) (int, int, error) {
	d.Logger.Info("üöÄ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞")

	// 0. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è
	d.FSM.ForceTo(fsm.StateChiefProfile)

	defer func() {
		// 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
		d.FSM.ForceTo(fsm.StateMainCity)
	}()

	// 1. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
	_, err := d.ADB.Screenshot(imagePath)
	if err != nil {
		d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞", slog.Any("err", err))
		return -1, -1, err
	}

	// 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ OCR
	zones, ok := d.AreaLookup.Get("chief_profile_nickname")
	if !ok {
		return -1, -1, errors.New("‚ùå –∑–æ–Ω–∞ 'chief_profile_nickname' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ area.json")
	}

	// 3. –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞
	nicknameRaw, err := vision.ExtractTextFromRegion(imagePath, zones.Zone, "gamer_detected", true)
	if err != nil {
		return -1, -1, err
	}
	nicknameParsed := strings.ToLower(strings.TrimSpace(nicknameRaw))

	// drop aliance [RLX]batazor -> batazor
	if strings.Contains(nicknameParsed, "]") {
		nicknameParsed = strings.Split(nicknameParsed, "]")[1]
	}

	d.Logger.Info("üü¢ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –Ω–∏–∫–Ω–µ–π–º", slog.String("raw", nicknameRaw), slog.String("parsed", nicknameParsed))

	type matchInfo struct {
		profileIdx int
		gamerIdx   int
		score      int
	}

	var matches []matchInfo

	for pIdx, profile := range d.Profiles {
		for gIdx, gamer := range profile.Gamer {
			expected := strings.ToLower(strings.TrimSpace(gamer.Nickname))
			if matched := fuzzy.RankMatch(expected, nicknameParsed); matched != -1 {
				matches = append(matches, matchInfo{pIdx, gIdx, matched})
			}
		}
	}

	if len(matches) == 0 {
		d.Logger.Warn("‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–µ—á—ë—Ç–∫–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é", slog.String("parsed", nicknameParsed))
		return -1, -1, nil
	}

	// –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å —Å–∞–º—ã–º –Ω–∏–∑–∫–∏–º score)
	sort.Slice(matches, func(i, j int) bool {
		return matches[i].score < matches[j].score
	})
	best := matches[0]

	d.Logger.Info("‚úÖ –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫",
		slog.Int("profileIdx", best.profileIdx),
		slog.Int("gamerIdx", best.gamerIdx),
		slog.Int("score", best.score),
	)

	return best.profileIdx, best.gamerIdx, nil
}

func (d *Device) DetectAndSetCurrentGamer(ctx context.Context) (*domain.Gamer, int, int, error) {
	const tmpPath = "screenshots/after_profile_switch.png"

	// üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
	_, err := d.ADB.Screenshot(tmpPath)
	if err != nil {
		d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞", slog.Any("err", err))
		return nil, -1, -1, err
	}

	pIdx, gIdx, err := d.DetectedGamer(ctx, tmpPath)
	if err != nil || pIdx < 0 || gIdx < 0 {
		d.Logger.Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞", slog.Any("err", err))
		return nil, -1, -1, err
	}

	// üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ
	d.activeProfileIdx = pIdx
	d.activeGamerIdx = gIdx

	active := &d.Profiles[pIdx].Gamer[gIdx]
	d.Logger.Info("üîé –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω", slog.String("nickname", active.Nickname))

	d.FSM.SetCallback(active)

	return active, pIdx, gIdx, nil
}
