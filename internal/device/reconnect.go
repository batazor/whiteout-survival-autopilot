package device

import (
	"context"
	"fmt"
	"log/slog"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/batazor/whiteout-survival-autopilot/internal/adb"
	"github.com/batazor/whiteout-survival-autopilot/internal/config"
	"github.com/batazor/whiteout-survival-autopilot/internal/vision"
)

// StartReconnectChecker –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ—Ä—É—Ç–∏–Ω—É –ø—Ä–æ–≤–µ—Ä–∫–∏ reconnect-–æ–∫–Ω–∞ –≤ —Ñ–æ–Ω–µ
func (d *Device) StartReconnectChecker(ctx context.Context) {
	screenshotDir := filepath.Join("screenshots", d.Name)
	if err := os.MkdirAll(screenshotDir, os.ModePerm); err != nil {
		d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤", slog.Any("error", err))
		return
	}

	screenshotPath := filepath.Join(screenshotDir, "current.png")
	reconnectHandler := NewReconnectHandler(d.ADB, d.AreaLookup, d.Logger)

	ticker := time.NewTicker(10 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			d.Logger.Info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ reconnect")
			return
		case <-ticker.C:
			if err := reconnectHandler.HandleReconnect(screenshotPath); err != nil {
				d.Logger.Error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ reconnect", slog.Any("error", err))
			}
		}
	}
}

type ReconnectHandler struct {
	adbController adb.DeviceController
	area          *config.AreaLookup
	logger        *slog.Logger
	maxAttempts   int
}

func NewReconnectHandler(adb adb.DeviceController, area *config.AreaLookup, logger *slog.Logger) *ReconnectHandler {
	return &ReconnectHandler{
		adbController: adb,
		area:          area,
		logger:        logger,
		maxAttempts:   5,
	}
}

func (h *ReconnectHandler) HandleReconnect(screenshotPath string) error {
	const waitAfterReconnectClick = 20 * time.Second
	const waitAfterRestart = 10 * time.Second
	const maxTimeout = 20 * time.Second

	for restartCount := 0; ; restartCount++ {
		attempt := 0

		for attempt < h.maxAttempts {
			attempt++

			if _, err := h.adbController.Screenshot(screenshotPath); err != nil {
				h.logger.Warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞", slog.Any("err", err))
				return err
			}

			found, err := h.checkReconnectWindow(screenshotPath)
			if err != nil {
				h.logger.Warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫–Ω–∞ reconnect", slog.Any("err", err))
				return err
			}
			if !found {
				h.logger.Info("‚úÖ –ö–Ω–æ–ø–∫–∞ reconnect –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
				return nil
			}

			h.logger.Warn("Reconnect –æ–∫–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
				slog.Int("attempt", attempt),
				slog.Int("restartCount", restartCount),
			)

			if err := h.adbController.ClickRegion("reconnect_button", h.area); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ reconnect: %w", err)
			}

			h.logger.Info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ (20 —Å–µ–∫—É–Ω–¥)")
			time.Sleep(waitAfterReconnectClick)
		}

		// --- –†–µ—Å—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
		h.logger.Error("üö® –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
		if err := h.adbController.RestartApplication(); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: %w", err)
		}

		h.logger.Info("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)")
		time.Sleep(waitAfterRestart)

		// --- –ü–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –∂–¥—ë–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ reconnect ---
		h.logger.Info("‚è≥ –û–∂–∏–¥–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ reconnect (–¥–æ 20 —Å–µ–∫—É–Ω–¥)")

		expire := time.After(maxTimeout)
		tick := time.NewTicker(2 * time.Second)
		defer tick.Stop()

		for {
			select {
			case <-expire:
				h.logger.Warn("üîÅ –ö–Ω–æ–ø–∫–∞ reconnect –≤—Å–µ –µ—â–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª")
				break

			case <-tick.C:
				if _, err := h.adbController.Screenshot(screenshotPath); err != nil {
					return err
				}
				found, err := h.checkReconnectWindow(screenshotPath)
				if err != nil {
					return err
				}
				if !found {
					h.logger.Info("‚úÖ –ö–Ω–æ–ø–∫–∞ reconnect –∏—Å—á–µ–∑–ª–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
					return nil
				}
			}
		}
	}
}

func (h *ReconnectHandler) checkReconnectWindow(screenshotPath string) (bool, error) {
	region, err := h.area.GetRegionByName("reconnect_button")
	if err != nil {
		return false, fmt.Errorf("region reconnect_button not found: %w", err)
	}

	text, err := vision.ExtractTextFromRegion(
		screenshotPath,
		region.ToRectangle(),
		"reconnect_check",
		true, // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CLAHE –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è OCR
	)
	if err != nil {
		h.logger.Error("‚ùå –û—à–∏–±–∫–∞ OCR –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ reconnect", slog.Any("error", err))
		return false, err
	}

	text = strings.ToLower(strings.TrimSpace(text))
	h.logger.Info("üîç OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç reconnect", slog.String("text", text))

	// –ù–µ—Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
	target := "reconnect"
	if strings.Contains(text, target) || vision.FuzzySubstringMatch(text, target, 1) {
		h.logger.Info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–∫–Ω–æ reconnect")
		return true, nil
	}

	return false, nil
}

// CheckReconnectOnce –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É reconnect –¥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –æ–∫–Ω–∞ –∏–ª–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
func (d *Device) CheckReconnectOnce(ctx context.Context) {
	d.Logger.Info("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ reconnect –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")

	screenshotDir := filepath.Join("screenshots", d.Name)
	if err := os.MkdirAll(screenshotDir, os.ModePerm); err != nil {
		d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤", slog.Any("error", err))
		return
	}

	screenshotPath := filepath.Join(screenshotDir, "current.png")
	reconnectHandler := NewReconnectHandler(d.ADB, d.AreaLookup, d.Logger)

	if err := reconnectHandler.HandleReconnect(screenshotPath); err != nil {
		d.Logger.Error("‚ùå Reconnect –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π", slog.Any("error", err))
	} else {
		d.Logger.Info("‚úÖ Reconnect —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
	}
}
