package device

import (
	"context"
	"time"
)

func (d *Device) Start(ctx context.Context) {
	d.Logger.Info("üöÄ –°—Ç–∞—Ä—Ç –¥–µ–≤–∞–π—Å–∞")

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
	if _, pIdx, gIdx, err := d.DetectAndSetCurrentGamer(ctx); err == nil {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å next
		if gIdx+1 < len(d.Profiles[pIdx].Gamer) {
			gIdx++
		} else {
			pIdx++
			gIdx = 0
		}

		d.activeProfileIdx = pIdx
		d.activeGamerIdx = gIdx
	}

	for {
		for pIdx, profile := range d.Profiles {
			for gIdx := range profile.Gamer {
				select {
				case <-ctx.Done():
					d.Logger.Info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–≤–∞–π—Å–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É")
					return
				default:
					if gIdx == 0 {
						d.Logger.Info("üîÑ –°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É",
							"profile_index", pIdx,
							"gamer_index", gIdx,
							"nickname", profile.Gamer[gIdx].Nickname,
						)
						d.NextProfile(pIdx, gIdx)
					} else {
						d.Logger.Info("üë§ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É —Ç–æ–≥–æ –∂–µ –ø—Ä–æ—Ñ–∏–ª—è",
							"profile_index", pIdx,
							"gamer_index", gIdx,
							"nickname", profile.Gamer[gIdx].Nickname,
						)
						d.NextGamer(pIdx, gIdx)
					}

					time.Sleep(5 * time.Second)
				}
			}
		}
	}
}
