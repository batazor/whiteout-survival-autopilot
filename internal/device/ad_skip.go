package device

import (
	"context"
	"fmt"
	"image"
	"log/slog"
	"strings"
	"time"

	"github.com/batazor/whiteout-survival-autopilot/internal/imagefinder"
	"github.com/batazor/whiteout-survival-autopilot/internal/vision"
)

func (d *Device) handleEntryScreens(ctx context.Context) error {
	d.Logger.Info("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Ä–∞–Ω–æ–≤ –≤—Ö–æ–¥–∞ (welcome / —Ä–µ–∫–ª–∞–º–∞)")

	allKeywords := []string{
		"Welcome",
		"Alliance",
		"natalia",
		"Exploration",
		"Hero Gear",
		"General Speedup",
		"Construction Speedup",
	}

	timeout := 20 * time.Second
	start := time.Now()

	defer d.swipeToDismiss()

	mainScreenDetectedAt := time.Time{}

	for time.Since(start) < timeout {
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
			result, _ := vision.WaitForText(ctx, d.ADB, allKeywords, time.Second, image.Rectangle{})
			if result != nil {
				text := strings.ToLower(strings.TrimSpace(result.Text))
				d.Logger.Info("üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç: " + text)

				switch {
				case strings.Contains(text, "exploration"), strings.Contains(text, "alliance"):
					// üìå –û–±–Ω–∞—Ä—É–∂–µ–Ω –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è
					if mainScreenDetectedAt.IsZero() {
						d.Logger.Info("üîî –ù–∞–π–¥–µ–Ω –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–∞—É–∑–∞")
						mainScreenDetectedAt = time.Now()
					}

				case strings.Contains(text, "welcome"),
					strings.Contains(text, "natalia"),
					strings.Contains(text, "hero gear"),
					strings.Contains(text, "general speedup"),
					strings.Contains(text, "construction speedup"):
					d.Logger.Info(fmt.Sprintf("üåÄ –ù–∞–π–¥–µ–Ω pop-up ('%s') ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º", text))
					err := d.ADB.ClickRegion("ad_banner_close", d.areaLookup)
					if err != nil {
						d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å pop-up", slog.Any("err", err))
						return err
					}
					time.Sleep(300 * time.Millisecond)
					mainScreenDetectedAt = time.Time{} // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
				}
			}

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ confirm, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∫–ª–∏–∫–∞–µ–º
			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –∑–µ–ª–µ–Ω–æ–≥–æ –≤ –∑–æ–Ω–µ welcome_back_continue_button, –ø–æ—Ç–æ–º—É —á—Ç–æ OCR –ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
			// –Ω–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ
			isConfirm, err := imagefinder.CheckRegionColor(ctx, d.ADB, d.areaLookup, "welcome_back_continue_button", "green", 0.3, d.Logger)
			if err != nil {
				d.Logger.Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–≤–µ—Ç–∞", slog.Any("err", err))
				return err
			}

			if isConfirm {
				d.Logger.Info("üü¢ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è welcome_back_continue_button")
				if err := d.ADB.ClickRegion("welcome_back_continue_button", d.areaLookup); err != nil {
					d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ welcome_back_continue_button", slog.Any("err", err))
					return err
				}

				time.Sleep(1 * time.Second)
			}

			// ‚úÖ –ï—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –±—ã–ª –∑–∞–º–µ—á–µ–Ω –∏ –ø—Ä–æ—à–ª–æ >2.5 —Å–µ–∫—É–Ω–¥—ã ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å—ë —á–∏—Å—Ç–æ
			if !mainScreenDetectedAt.IsZero() && time.Since(mainScreenDetectedAt) > 2500*time.Millisecond {
				d.Logger.Info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ handleEntryScreens")
				return nil
			}

			time.Sleep(300 * time.Millisecond)
		}
	}

	d.Logger.Warn("‚è± –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–≤–∞–π–ø")
	return nil
}

func (d *Device) swipeToDismiss() {
	const (
		swipeY = 500
		dx     = 150
		delay  = 100 * time.Millisecond
	)

	_ = d.ADB.Swipe(500, swipeY, 500-dx, swipeY, delay)
	time.Sleep(300 * time.Millisecond)
	_ = d.ADB.Swipe(500-dx, swipeY, 500, swipeY, delay)
}
