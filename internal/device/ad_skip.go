package device

import (
	"context"
	"image"
	"log/slog"
	"strings"
	"time"

	"github.com/batazor/whiteout-survival-autopilot/internal/vision"
)

func (d *Device) handleEntryScreens(ctx context.Context) error {
	d.Logger.Info("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Ä–∞–Ω–æ–≤ –≤—Ö–æ–¥–∞ (welcome / —Ä–µ–∫–ª–∞–º–∞)")

	allKeywords := []string{
		"Welcome",     // welcome back
		"Alliance",    // –∞–ª—å—è–Ω—Å
		"natalia",     // —Ä–µ–∫–ª–∞–º–∞
		"Exploration", // –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º
	}

	timeout := 20 * time.Second
	start := time.Now()

	// –°–≤–∞–π–ø –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ –∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
	defer d.swipeToDismiss()

	for time.Since(start) < timeout {
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
			result, _ := vision.WaitForText(ctx, d.ADB, allKeywords, time.Second, image.Rectangle{})
			if result != nil {
				text := strings.ToLower(strings.TrimSpace(result.Text))
				d.Logger.Info("üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç: " + text)

				switch {
				case strings.Contains(text, "exploration"), strings.Contains(text, "alliance"):
					d.Logger.Info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω (Exploration) ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ handleEntryScreens")
					return nil

				case strings.Contains(text, "welcome"), strings.Contains(text, "natalia"):
					d.Logger.Info("üåÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω pop-up ('%s') ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–π–ø –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è", text)
					err := d.ADB.ClickRegion("ad_banner_close", d.areaLookup)
					if err != nil {
						d.Logger.Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å pop-up", slog.Any("err", err))
						return err
					}

					time.Sleep(100 * time.Millisecond)
				}
			}

			time.Sleep(300 * time.Millisecond)
		}
	}

	d.Logger.Warn("‚è± –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–≤–∞–π–ø")

	return nil
}

func (d *Device) swipeToDismiss() {
	const (
		swipeY = 500
		dx     = 150
		delay  = 100 * time.Millisecond
	)

	_ = d.ADB.Swipe(500, swipeY, 500-dx, swipeY, delay)
	time.Sleep(300 * time.Millisecond)
	_ = d.ADB.Swipe(500-dx, swipeY, 500, swipeY, delay)
}
